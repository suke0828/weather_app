version: 2.1
jobs:
  build:
    docker:
    - image: circleci/ruby:3.0.0
      command: [--default-authentication-plugin=mysql_native_password]
      environment:
        - BUNDLER_VERSION: 2.2.3
        - RAILS_ENV: 'test'
        - MYSQL_HOST: 127.0.0.1
        - MYSQL_USERNAME: 'root'
        - MYSQL_PASSWORD: ''
        - MYSQL_PORT: 3306
    - image: circleci/mysql:8.0.23
      environment:
        - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
        - MYSQL_ROOT_HOST: '%'

    working_directory: ~/portfolio/weather

    steps:
    - checkout

    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-
        - rails-demo-yarn-{{ checksum "yarn.lock" }}
        - rails-demo-yarn-

    - run:
        name: install dependencies
        command: |
          bundle install --jobs=4 --retry=3
    - run:
        name: install yarn
        command: yarn install --cache-folder ~/.cache/yarn

    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}
    - save_cache:
        key: rails-demo-yarn-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn

    # Database setup
    - run: mv config/database.yml.ci config/database.yml

    - run:
        name: wait db
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    # Database setup
    - run:
        name: DatabaseSetup
        command: |
          bundle exec rake db:create
          bundle exec rake db:schema:load

    # run RuboCop
    - run:
        name: RuboCop
        command: bundle exec rubocop

    # run RSpec
    - run:
        name: RSpec
        command: |
          mkdir /tmp/test-results
          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
            circleci tests split --split-by=timings)"

          bundle exec rspec \
            --format progress \
            --format RspecJunitFormatter \
            --out /tmp/test-results/rspec.xml \
            --format progress \
            $TEST_FILES

    # collect reports
    - store_test_results:
        path: /tmp/test-results
    - store_artifacts:
        path: /tmp/test-results
        destination: test-results
